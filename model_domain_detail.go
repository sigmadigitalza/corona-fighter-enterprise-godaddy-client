/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DomainDetail struct for DomainDetail
type DomainDetail struct {
	// Authorization code for transferring the Domain
	AuthCode string `json:"authCode"`
	ContactAdmin Contact `json:"contactAdmin"`
	ContactBilling Contact `json:"contactBilling"`
	ContactRegistrant Contact `json:"contactRegistrant"`
	ContactTech Contact `json:"contactTech"`
	// Date and time when this domain was created
	CreatedAt time.Time `json:"createdAt"`
	// Date and time when this domain was deleted
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Date and time when this domain is eligible to transfer
	TransferAwayEligibleAt *time.Time `json:"transferAwayEligibleAt,omitempty"`
	// Name of the domain
	Domain string `json:"domain"`
	// Unique identifier for this Domain
	DomainId float64 `json:"domainId"`
	// Whether or not the domain is protected from expiration
	ExpirationProtected bool `json:"expirationProtected"`
	// Date and time when this domain will expire
	Expires *time.Time `json:"expires,omitempty"`
	// Whether or not the domain contact details should be shown in the WHOIS
	ExposeWhois *bool `json:"exposeWhois,omitempty"`
	// Whether or not the domain is on-hold by the registrar
	HoldRegistrar bool `json:"holdRegistrar"`
	// Whether or not the domain is locked to prevent transfers
	Locked bool `json:"locked"`
	// Fully-qualified domain names for DNS servers
	NameServers []string `json:"nameServers"`
	// Whether or not the domain has privacy protection
	Privacy bool `json:"privacy"`
	// Whether or not the domain is configured to automatically renew
	RenewAuto bool `json:"renewAuto"`
	// Date the domain must renew on
	RenewDeadline time.Time `json:"renewDeadline"`
	// Processing status of the domain<br/><ul> <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li> <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li> <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li> <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li> <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li> <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li> <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li> <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li> <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li> <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li> <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li> <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li> </ul>
	Status string `json:"status"`
	// Reseller subaccount shopperid who can manage the domain
	SubaccountId *string `json:"subaccountId,omitempty"`
	// Whether or not the domain is protected from transfer
	TransferProtected bool `json:"transferProtected"`
	Verifications *VerificationsDomain `json:"verifications,omitempty"`
}

// NewDomainDetail instantiates a new DomainDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainDetail(authCode string, contactAdmin Contact, contactBilling Contact, contactRegistrant Contact, contactTech Contact, createdAt time.Time, domain string, domainId float64, expirationProtected bool, holdRegistrar bool, locked bool, nameServers []string, privacy bool, renewAuto bool, renewDeadline time.Time, status string, transferProtected bool) *DomainDetail {
	this := DomainDetail{}
	this.AuthCode = authCode
	this.ContactAdmin = contactAdmin
	this.ContactBilling = contactBilling
	this.ContactRegistrant = contactRegistrant
	this.ContactTech = contactTech
	this.CreatedAt = createdAt
	this.Domain = domain
	this.DomainId = domainId
	this.ExpirationProtected = expirationProtected
	this.HoldRegistrar = holdRegistrar
	this.Locked = locked
	this.NameServers = nameServers
	this.Privacy = privacy
	this.RenewAuto = renewAuto
	this.RenewDeadline = renewDeadline
	this.Status = status
	this.TransferProtected = transferProtected
	return &this
}

// NewDomainDetailWithDefaults instantiates a new DomainDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainDetailWithDefaults() *DomainDetail {
	this := DomainDetail{}
	return &this
}

// GetAuthCode returns the AuthCode field value
func (o *DomainDetail) GetAuthCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetAuthCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuthCode, true
}

// SetAuthCode sets field value
func (o *DomainDetail) SetAuthCode(v string) {
	o.AuthCode = v
}

// GetContactAdmin returns the ContactAdmin field value
func (o *DomainDetail) GetContactAdmin() Contact {
	if o == nil {
		var ret Contact
		return ret
	}

	return o.ContactAdmin
}

// GetContactAdminOk returns a tuple with the ContactAdmin field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetContactAdminOk() (*Contact, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContactAdmin, true
}

// SetContactAdmin sets field value
func (o *DomainDetail) SetContactAdmin(v Contact) {
	o.ContactAdmin = v
}

// GetContactBilling returns the ContactBilling field value
func (o *DomainDetail) GetContactBilling() Contact {
	if o == nil {
		var ret Contact
		return ret
	}

	return o.ContactBilling
}

// GetContactBillingOk returns a tuple with the ContactBilling field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetContactBillingOk() (*Contact, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContactBilling, true
}

// SetContactBilling sets field value
func (o *DomainDetail) SetContactBilling(v Contact) {
	o.ContactBilling = v
}

// GetContactRegistrant returns the ContactRegistrant field value
func (o *DomainDetail) GetContactRegistrant() Contact {
	if o == nil {
		var ret Contact
		return ret
	}

	return o.ContactRegistrant
}

// GetContactRegistrantOk returns a tuple with the ContactRegistrant field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetContactRegistrantOk() (*Contact, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContactRegistrant, true
}

// SetContactRegistrant sets field value
func (o *DomainDetail) SetContactRegistrant(v Contact) {
	o.ContactRegistrant = v
}

// GetContactTech returns the ContactTech field value
func (o *DomainDetail) GetContactTech() Contact {
	if o == nil {
		var ret Contact
		return ret
	}

	return o.ContactTech
}

// GetContactTechOk returns a tuple with the ContactTech field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetContactTechOk() (*Contact, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContactTech, true
}

// SetContactTech sets field value
func (o *DomainDetail) SetContactTech(v Contact) {
	o.ContactTech = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DomainDetail) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DomainDetail) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *DomainDetail) GetDeletedAt() time.Time {
	if o == nil || o.DeletedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *DomainDetail) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *DomainDetail) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetTransferAwayEligibleAt returns the TransferAwayEligibleAt field value if set, zero value otherwise.
func (o *DomainDetail) GetTransferAwayEligibleAt() time.Time {
	if o == nil || o.TransferAwayEligibleAt == nil {
		var ret time.Time
		return ret
	}
	return *o.TransferAwayEligibleAt
}

// GetTransferAwayEligibleAtOk returns a tuple with the TransferAwayEligibleAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetTransferAwayEligibleAtOk() (*time.Time, bool) {
	if o == nil || o.TransferAwayEligibleAt == nil {
		return nil, false
	}
	return o.TransferAwayEligibleAt, true
}

// HasTransferAwayEligibleAt returns a boolean if a field has been set.
func (o *DomainDetail) HasTransferAwayEligibleAt() bool {
	if o != nil && o.TransferAwayEligibleAt != nil {
		return true
	}

	return false
}

// SetTransferAwayEligibleAt gets a reference to the given time.Time and assigns it to the TransferAwayEligibleAt field.
func (o *DomainDetail) SetTransferAwayEligibleAt(v time.Time) {
	o.TransferAwayEligibleAt = &v
}

// GetDomain returns the Domain field value
func (o *DomainDetail) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *DomainDetail) SetDomain(v string) {
	o.Domain = v
}

// GetDomainId returns the DomainId field value
func (o *DomainDetail) GetDomainId() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetDomainIdOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DomainId, true
}

// SetDomainId sets field value
func (o *DomainDetail) SetDomainId(v float64) {
	o.DomainId = v
}

// GetExpirationProtected returns the ExpirationProtected field value
func (o *DomainDetail) GetExpirationProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExpirationProtected
}

// GetExpirationProtectedOk returns a tuple with the ExpirationProtected field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetExpirationProtectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpirationProtected, true
}

// SetExpirationProtected sets field value
func (o *DomainDetail) SetExpirationProtected(v bool) {
	o.ExpirationProtected = v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *DomainDetail) GetExpires() time.Time {
	if o == nil || o.Expires == nil {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetExpiresOk() (*time.Time, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *DomainDetail) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *DomainDetail) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetExposeWhois returns the ExposeWhois field value if set, zero value otherwise.
func (o *DomainDetail) GetExposeWhois() bool {
	if o == nil || o.ExposeWhois == nil {
		var ret bool
		return ret
	}
	return *o.ExposeWhois
}

// GetExposeWhoisOk returns a tuple with the ExposeWhois field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetExposeWhoisOk() (*bool, bool) {
	if o == nil || o.ExposeWhois == nil {
		return nil, false
	}
	return o.ExposeWhois, true
}

// HasExposeWhois returns a boolean if a field has been set.
func (o *DomainDetail) HasExposeWhois() bool {
	if o != nil && o.ExposeWhois != nil {
		return true
	}

	return false
}

// SetExposeWhois gets a reference to the given bool and assigns it to the ExposeWhois field.
func (o *DomainDetail) SetExposeWhois(v bool) {
	o.ExposeWhois = &v
}

// GetHoldRegistrar returns the HoldRegistrar field value
func (o *DomainDetail) GetHoldRegistrar() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HoldRegistrar
}

// GetHoldRegistrarOk returns a tuple with the HoldRegistrar field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetHoldRegistrarOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HoldRegistrar, true
}

// SetHoldRegistrar sets field value
func (o *DomainDetail) SetHoldRegistrar(v bool) {
	o.HoldRegistrar = v
}

// GetLocked returns the Locked field value
func (o *DomainDetail) GetLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Locked
}

// GetLockedOk returns a tuple with the Locked field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetLockedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locked, true
}

// SetLocked sets field value
func (o *DomainDetail) SetLocked(v bool) {
	o.Locked = v
}

// GetNameServers returns the NameServers field value
func (o *DomainDetail) GetNameServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NameServers
}

// GetNameServersOk returns a tuple with the NameServers field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetNameServersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NameServers, true
}

// SetNameServers sets field value
func (o *DomainDetail) SetNameServers(v []string) {
	o.NameServers = v
}

// GetPrivacy returns the Privacy field value
func (o *DomainDetail) GetPrivacy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetPrivacyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Privacy, true
}

// SetPrivacy sets field value
func (o *DomainDetail) SetPrivacy(v bool) {
	o.Privacy = v
}

// GetRenewAuto returns the RenewAuto field value
func (o *DomainDetail) GetRenewAuto() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RenewAuto
}

// GetRenewAutoOk returns a tuple with the RenewAuto field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetRenewAutoOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RenewAuto, true
}

// SetRenewAuto sets field value
func (o *DomainDetail) SetRenewAuto(v bool) {
	o.RenewAuto = v
}

// GetRenewDeadline returns the RenewDeadline field value
func (o *DomainDetail) GetRenewDeadline() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RenewDeadline
}

// GetRenewDeadlineOk returns a tuple with the RenewDeadline field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetRenewDeadlineOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RenewDeadline, true
}

// SetRenewDeadline sets field value
func (o *DomainDetail) SetRenewDeadline(v time.Time) {
	o.RenewDeadline = v
}

// GetStatus returns the Status field value
func (o *DomainDetail) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DomainDetail) SetStatus(v string) {
	o.Status = v
}

// GetSubaccountId returns the SubaccountId field value if set, zero value otherwise.
func (o *DomainDetail) GetSubaccountId() string {
	if o == nil || o.SubaccountId == nil {
		var ret string
		return ret
	}
	return *o.SubaccountId
}

// GetSubaccountIdOk returns a tuple with the SubaccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetSubaccountIdOk() (*string, bool) {
	if o == nil || o.SubaccountId == nil {
		return nil, false
	}
	return o.SubaccountId, true
}

// HasSubaccountId returns a boolean if a field has been set.
func (o *DomainDetail) HasSubaccountId() bool {
	if o != nil && o.SubaccountId != nil {
		return true
	}

	return false
}

// SetSubaccountId gets a reference to the given string and assigns it to the SubaccountId field.
func (o *DomainDetail) SetSubaccountId(v string) {
	o.SubaccountId = &v
}

// GetTransferProtected returns the TransferProtected field value
func (o *DomainDetail) GetTransferProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TransferProtected
}

// GetTransferProtectedOk returns a tuple with the TransferProtected field value
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetTransferProtectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransferProtected, true
}

// SetTransferProtected sets field value
func (o *DomainDetail) SetTransferProtected(v bool) {
	o.TransferProtected = v
}

// GetVerifications returns the Verifications field value if set, zero value otherwise.
func (o *DomainDetail) GetVerifications() VerificationsDomain {
	if o == nil || o.Verifications == nil {
		var ret VerificationsDomain
		return ret
	}
	return *o.Verifications
}

// GetVerificationsOk returns a tuple with the Verifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainDetail) GetVerificationsOk() (*VerificationsDomain, bool) {
	if o == nil || o.Verifications == nil {
		return nil, false
	}
	return o.Verifications, true
}

// HasVerifications returns a boolean if a field has been set.
func (o *DomainDetail) HasVerifications() bool {
	if o != nil && o.Verifications != nil {
		return true
	}

	return false
}

// SetVerifications gets a reference to the given VerificationsDomain and assigns it to the Verifications field.
func (o *DomainDetail) SetVerifications(v VerificationsDomain) {
	o.Verifications = &v
}

func (o DomainDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["authCode"] = o.AuthCode
	}
	if true {
		toSerialize["contactAdmin"] = o.ContactAdmin
	}
	if true {
		toSerialize["contactBilling"] = o.ContactBilling
	}
	if true {
		toSerialize["contactRegistrant"] = o.ContactRegistrant
	}
	if true {
		toSerialize["contactTech"] = o.ContactTech
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.DeletedAt != nil {
		toSerialize["deletedAt"] = o.DeletedAt
	}
	if o.TransferAwayEligibleAt != nil {
		toSerialize["transferAwayEligibleAt"] = o.TransferAwayEligibleAt
	}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["domainId"] = o.DomainId
	}
	if true {
		toSerialize["expirationProtected"] = o.ExpirationProtected
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.ExposeWhois != nil {
		toSerialize["exposeWhois"] = o.ExposeWhois
	}
	if true {
		toSerialize["holdRegistrar"] = o.HoldRegistrar
	}
	if true {
		toSerialize["locked"] = o.Locked
	}
	if true {
		toSerialize["nameServers"] = o.NameServers
	}
	if true {
		toSerialize["privacy"] = o.Privacy
	}
	if true {
		toSerialize["renewAuto"] = o.RenewAuto
	}
	if true {
		toSerialize["renewDeadline"] = o.RenewDeadline
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.SubaccountId != nil {
		toSerialize["subaccountId"] = o.SubaccountId
	}
	if true {
		toSerialize["transferProtected"] = o.TransferProtected
	}
	if o.Verifications != nil {
		toSerialize["verifications"] = o.Verifications
	}
	return json.Marshal(toSerialize)
}

type NullableDomainDetail struct {
	value *DomainDetail
	isSet bool
}

func (v NullableDomainDetail) Get() *DomainDetail {
	return v.value
}

func (v *NullableDomainDetail) Set(val *DomainDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainDetail(val *DomainDetail) *NullableDomainDetail {
	return &NullableDomainDetail{value: val, isSet: true}
}

func (v NullableDomainDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


