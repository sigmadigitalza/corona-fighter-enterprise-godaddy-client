/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConsentDomainUpdate struct for ConsentDomainUpdate
type ConsentDomainUpdate struct {
	// Timestamp indicating when the end-user consented to these agreements
	AgreedAt string `json:"agreedAt"`
	// Originating client IP address of the end-user's computer when they consented to the agreements
	AgreedBy string `json:"agreedBy"`
	// Unique identifiers of the agreements to which the end-user has agreed, as required by the elements being updated<br/><ul><li><strong style='margin-left: 12px;'>EXPOSE_WHOIS</strong> - Required when the exposeWhois field is updated to true</li></ul>
	AgreementKeys []string `json:"agreementKeys"`
}

// NewConsentDomainUpdate instantiates a new ConsentDomainUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentDomainUpdate(agreedAt string, agreedBy string, agreementKeys []string) *ConsentDomainUpdate {
	this := ConsentDomainUpdate{}
	this.AgreedAt = agreedAt
	this.AgreedBy = agreedBy
	this.AgreementKeys = agreementKeys
	return &this
}

// NewConsentDomainUpdateWithDefaults instantiates a new ConsentDomainUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentDomainUpdateWithDefaults() *ConsentDomainUpdate {
	this := ConsentDomainUpdate{}
	return &this
}

// GetAgreedAt returns the AgreedAt field value
func (o *ConsentDomainUpdate) GetAgreedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgreedAt
}

// GetAgreedAtOk returns a tuple with the AgreedAt field value
// and a boolean to check if the value has been set.
func (o *ConsentDomainUpdate) GetAgreedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AgreedAt, true
}

// SetAgreedAt sets field value
func (o *ConsentDomainUpdate) SetAgreedAt(v string) {
	o.AgreedAt = v
}

// GetAgreedBy returns the AgreedBy field value
func (o *ConsentDomainUpdate) GetAgreedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgreedBy
}

// GetAgreedByOk returns a tuple with the AgreedBy field value
// and a boolean to check if the value has been set.
func (o *ConsentDomainUpdate) GetAgreedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AgreedBy, true
}

// SetAgreedBy sets field value
func (o *ConsentDomainUpdate) SetAgreedBy(v string) {
	o.AgreedBy = v
}

// GetAgreementKeys returns the AgreementKeys field value
func (o *ConsentDomainUpdate) GetAgreementKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AgreementKeys
}

// GetAgreementKeysOk returns a tuple with the AgreementKeys field value
// and a boolean to check if the value has been set.
func (o *ConsentDomainUpdate) GetAgreementKeysOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AgreementKeys, true
}

// SetAgreementKeys sets field value
func (o *ConsentDomainUpdate) SetAgreementKeys(v []string) {
	o.AgreementKeys = v
}

func (o ConsentDomainUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["agreedAt"] = o.AgreedAt
	}
	if true {
		toSerialize["agreedBy"] = o.AgreedBy
	}
	if true {
		toSerialize["agreementKeys"] = o.AgreementKeys
	}
	return json.Marshal(toSerialize)
}

type NullableConsentDomainUpdate struct {
	value *ConsentDomainUpdate
	isSet bool
}

func (v NullableConsentDomainUpdate) Get() *ConsentDomainUpdate {
	return v.value
}

func (v *NullableConsentDomainUpdate) Set(val *ConsentDomainUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentDomainUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentDomainUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentDomainUpdate(val *ConsentDomainUpdate) *NullableConsentDomainUpdate {
	return &NullableConsentDomainUpdate{value: val, isSet: true}
}

func (v NullableConsentDomainUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentDomainUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


