/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainUpdate struct for DomainUpdate
type DomainUpdate struct {
	// Whether or not the domain should be locked to prevent transfers
	Locked *bool `json:"locked,omitempty"`
	// Fully-qualified domain names for Name Servers to associate with the domain
	NameServers *[]map[string]interface{} `json:"nameServers,omitempty"`
	// Whether or not the domain should be configured to automatically renew
	RenewAuto *bool `json:"renewAuto,omitempty"`
	// Reseller subaccount shopperid who can manage the domain
	SubaccountId *string `json:"subaccountId,omitempty"`
	// Whether or not the domain contact details should be shown in the WHOIS
	ExposeWhois *bool `json:"exposeWhois,omitempty"`
	Consent *ConsentDomainUpdate `json:"consent,omitempty"`
}

// NewDomainUpdate instantiates a new DomainUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainUpdate() *DomainUpdate {
	this := DomainUpdate{}
	return &this
}

// NewDomainUpdateWithDefaults instantiates a new DomainUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainUpdateWithDefaults() *DomainUpdate {
	this := DomainUpdate{}
	return &this
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *DomainUpdate) GetLocked() bool {
	if o == nil || o.Locked == nil {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetLockedOk() (*bool, bool) {
	if o == nil || o.Locked == nil {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *DomainUpdate) HasLocked() bool {
	if o != nil && o.Locked != nil {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *DomainUpdate) SetLocked(v bool) {
	o.Locked = &v
}

// GetNameServers returns the NameServers field value if set, zero value otherwise.
func (o *DomainUpdate) GetNameServers() []map[string]interface{} {
	if o == nil || o.NameServers == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.NameServers
}

// GetNameServersOk returns a tuple with the NameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetNameServersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.NameServers == nil {
		return nil, false
	}
	return o.NameServers, true
}

// HasNameServers returns a boolean if a field has been set.
func (o *DomainUpdate) HasNameServers() bool {
	if o != nil && o.NameServers != nil {
		return true
	}

	return false
}

// SetNameServers gets a reference to the given []map[string]interface{} and assigns it to the NameServers field.
func (o *DomainUpdate) SetNameServers(v []map[string]interface{}) {
	o.NameServers = &v
}

// GetRenewAuto returns the RenewAuto field value if set, zero value otherwise.
func (o *DomainUpdate) GetRenewAuto() bool {
	if o == nil || o.RenewAuto == nil {
		var ret bool
		return ret
	}
	return *o.RenewAuto
}

// GetRenewAutoOk returns a tuple with the RenewAuto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetRenewAutoOk() (*bool, bool) {
	if o == nil || o.RenewAuto == nil {
		return nil, false
	}
	return o.RenewAuto, true
}

// HasRenewAuto returns a boolean if a field has been set.
func (o *DomainUpdate) HasRenewAuto() bool {
	if o != nil && o.RenewAuto != nil {
		return true
	}

	return false
}

// SetRenewAuto gets a reference to the given bool and assigns it to the RenewAuto field.
func (o *DomainUpdate) SetRenewAuto(v bool) {
	o.RenewAuto = &v
}

// GetSubaccountId returns the SubaccountId field value if set, zero value otherwise.
func (o *DomainUpdate) GetSubaccountId() string {
	if o == nil || o.SubaccountId == nil {
		var ret string
		return ret
	}
	return *o.SubaccountId
}

// GetSubaccountIdOk returns a tuple with the SubaccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetSubaccountIdOk() (*string, bool) {
	if o == nil || o.SubaccountId == nil {
		return nil, false
	}
	return o.SubaccountId, true
}

// HasSubaccountId returns a boolean if a field has been set.
func (o *DomainUpdate) HasSubaccountId() bool {
	if o != nil && o.SubaccountId != nil {
		return true
	}

	return false
}

// SetSubaccountId gets a reference to the given string and assigns it to the SubaccountId field.
func (o *DomainUpdate) SetSubaccountId(v string) {
	o.SubaccountId = &v
}

// GetExposeWhois returns the ExposeWhois field value if set, zero value otherwise.
func (o *DomainUpdate) GetExposeWhois() bool {
	if o == nil || o.ExposeWhois == nil {
		var ret bool
		return ret
	}
	return *o.ExposeWhois
}

// GetExposeWhoisOk returns a tuple with the ExposeWhois field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetExposeWhoisOk() (*bool, bool) {
	if o == nil || o.ExposeWhois == nil {
		return nil, false
	}
	return o.ExposeWhois, true
}

// HasExposeWhois returns a boolean if a field has been set.
func (o *DomainUpdate) HasExposeWhois() bool {
	if o != nil && o.ExposeWhois != nil {
		return true
	}

	return false
}

// SetExposeWhois gets a reference to the given bool and assigns it to the ExposeWhois field.
func (o *DomainUpdate) SetExposeWhois(v bool) {
	o.ExposeWhois = &v
}

// GetConsent returns the Consent field value if set, zero value otherwise.
func (o *DomainUpdate) GetConsent() ConsentDomainUpdate {
	if o == nil || o.Consent == nil {
		var ret ConsentDomainUpdate
		return ret
	}
	return *o.Consent
}

// GetConsentOk returns a tuple with the Consent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainUpdate) GetConsentOk() (*ConsentDomainUpdate, bool) {
	if o == nil || o.Consent == nil {
		return nil, false
	}
	return o.Consent, true
}

// HasConsent returns a boolean if a field has been set.
func (o *DomainUpdate) HasConsent() bool {
	if o != nil && o.Consent != nil {
		return true
	}

	return false
}

// SetConsent gets a reference to the given ConsentDomainUpdate and assigns it to the Consent field.
func (o *DomainUpdate) SetConsent(v ConsentDomainUpdate) {
	o.Consent = &v
}

func (o DomainUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Locked != nil {
		toSerialize["locked"] = o.Locked
	}
	if o.NameServers != nil {
		toSerialize["nameServers"] = o.NameServers
	}
	if o.RenewAuto != nil {
		toSerialize["renewAuto"] = o.RenewAuto
	}
	if o.SubaccountId != nil {
		toSerialize["subaccountId"] = o.SubaccountId
	}
	if o.ExposeWhois != nil {
		toSerialize["exposeWhois"] = o.ExposeWhois
	}
	if o.Consent != nil {
		toSerialize["consent"] = o.Consent
	}
	return json.Marshal(toSerialize)
}

type NullableDomainUpdate struct {
	value *DomainUpdate
	isSet bool
}

func (v NullableDomainUpdate) Get() *DomainUpdate {
	return v.value
}

func (v *NullableDomainUpdate) Set(val *DomainUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUpdate(val *DomainUpdate) *NullableDomainUpdate {
	return &NullableDomainUpdate{value: val, isSet: true}
}

func (v NullableDomainUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


