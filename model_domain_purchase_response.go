/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainPurchaseResponse struct for DomainPurchaseResponse
type DomainPurchaseResponse struct {
	// Currency in which the `total` is listed
	Currency *string `json:"currency,omitempty"`
	// Number items included in the order
	ItemCount int32 `json:"itemCount"`
	// Unique identifier of the order processed to purchase the domain
	OrderId int32 `json:"orderId"`
	// Total cost of the domain and any selected add-ons
	Total int32 `json:"total"`
}

// NewDomainPurchaseResponse instantiates a new DomainPurchaseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainPurchaseResponse(itemCount int32, orderId int32, total int32) *DomainPurchaseResponse {
	this := DomainPurchaseResponse{}
	var currency string = "USD"
	this.Currency = &currency
	this.ItemCount = itemCount
	this.OrderId = orderId
	this.Total = total
	return &this
}

// NewDomainPurchaseResponseWithDefaults instantiates a new DomainPurchaseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainPurchaseResponseWithDefaults() *DomainPurchaseResponse {
	this := DomainPurchaseResponse{}
	var currency string = "USD"
	this.Currency = &currency
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *DomainPurchaseResponse) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainPurchaseResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *DomainPurchaseResponse) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *DomainPurchaseResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetItemCount returns the ItemCount field value
func (o *DomainPurchaseResponse) GetItemCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value
// and a boolean to check if the value has been set.
func (o *DomainPurchaseResponse) GetItemCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ItemCount, true
}

// SetItemCount sets field value
func (o *DomainPurchaseResponse) SetItemCount(v int32) {
	o.ItemCount = v
}

// GetOrderId returns the OrderId field value
func (o *DomainPurchaseResponse) GetOrderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *DomainPurchaseResponse) GetOrderIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *DomainPurchaseResponse) SetOrderId(v int32) {
	o.OrderId = v
}

// GetTotal returns the Total field value
func (o *DomainPurchaseResponse) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *DomainPurchaseResponse) GetTotalOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *DomainPurchaseResponse) SetTotal(v int32) {
	o.Total = v
}

func (o DomainPurchaseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["itemCount"] = o.ItemCount
	}
	if true {
		toSerialize["orderId"] = o.OrderId
	}
	if true {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableDomainPurchaseResponse struct {
	value *DomainPurchaseResponse
	isSet bool
}

func (v NullableDomainPurchaseResponse) Get() *DomainPurchaseResponse {
	return v.value
}

func (v *NullableDomainPurchaseResponse) Set(val *DomainPurchaseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainPurchaseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainPurchaseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainPurchaseResponse(val *DomainPurchaseResponse) *NullableDomainPurchaseResponse {
	return &NullableDomainPurchaseResponse{value: val, isSet: true}
}

func (v NullableDomainPurchaseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainPurchaseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


