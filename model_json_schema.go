/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonSchema struct for JsonSchema
type JsonSchema struct {
	Id string `json:"id"`
	Models map[string]interface{} `json:"models"`
	Properties map[string]interface{} `json:"properties"`
	Required []string `json:"required"`
}

// NewJsonSchema instantiates a new JsonSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonSchema(id string, models map[string]interface{}, properties map[string]interface{}, required []string) *JsonSchema {
	this := JsonSchema{}
	this.Id = id
	this.Models = models
	this.Properties = properties
	this.Required = required
	return &this
}

// NewJsonSchemaWithDefaults instantiates a new JsonSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonSchemaWithDefaults() *JsonSchema {
	this := JsonSchema{}
	return &this
}

// GetId returns the Id field value
func (o *JsonSchema) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JsonSchema) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JsonSchema) SetId(v string) {
	o.Id = v
}

// GetModels returns the Models field value
func (o *JsonSchema) GetModels() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Models
}

// GetModelsOk returns a tuple with the Models field value
// and a boolean to check if the value has been set.
func (o *JsonSchema) GetModelsOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Models, true
}

// SetModels sets field value
func (o *JsonSchema) SetModels(v map[string]interface{}) {
	o.Models = v
}

// GetProperties returns the Properties field value
func (o *JsonSchema) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *JsonSchema) GetPropertiesOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *JsonSchema) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetRequired returns the Required field value
func (o *JsonSchema) GetRequired() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *JsonSchema) GetRequiredOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *JsonSchema) SetRequired(v []string) {
	o.Required = v
}

func (o JsonSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["models"] = o.Models
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["required"] = o.Required
	}
	return json.Marshal(toSerialize)
}

type NullableJsonSchema struct {
	value *JsonSchema
	isSet bool
}

func (v NullableJsonSchema) Get() *JsonSchema {
	return v.value
}

func (v *NullableJsonSchema) Set(val *JsonSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonSchema(val *JsonSchema) *NullableJsonSchema {
	return &NullableJsonSchema{value: val, isSet: true}
}

func (v NullableJsonSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


