/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrivacyPurchase struct for PrivacyPurchase
type PrivacyPurchase struct {
	Consent Consent `json:"consent"`
}

// NewPrivacyPurchase instantiates a new PrivacyPurchase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivacyPurchase(consent Consent) *PrivacyPurchase {
	this := PrivacyPurchase{}
	this.Consent = consent
	return &this
}

// NewPrivacyPurchaseWithDefaults instantiates a new PrivacyPurchase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivacyPurchaseWithDefaults() *PrivacyPurchase {
	this := PrivacyPurchase{}
	return &this
}

// GetConsent returns the Consent field value
func (o *PrivacyPurchase) GetConsent() Consent {
	if o == nil {
		var ret Consent
		return ret
	}

	return o.Consent
}

// GetConsentOk returns a tuple with the Consent field value
// and a boolean to check if the value has been set.
func (o *PrivacyPurchase) GetConsentOk() (*Consent, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Consent, true
}

// SetConsent sets field value
func (o *PrivacyPurchase) SetConsent(v Consent) {
	o.Consent = v
}

func (o PrivacyPurchase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["consent"] = o.Consent
	}
	return json.Marshal(toSerialize)
}

type NullablePrivacyPurchase struct {
	value *PrivacyPurchase
	isSet bool
}

func (v NullablePrivacyPurchase) Get() *PrivacyPurchase {
	return v.value
}

func (v *NullablePrivacyPurchase) Set(val *PrivacyPurchase) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivacyPurchase) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivacyPurchase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivacyPurchase(val *PrivacyPurchase) *NullablePrivacyPurchase {
	return &NullablePrivacyPurchase{value: val, isSet: true}
}

func (v NullablePrivacyPurchase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivacyPurchase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


