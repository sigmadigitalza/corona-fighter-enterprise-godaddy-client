/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LegalAgreement struct for LegalAgreement
type LegalAgreement struct {
	// Unique identifier for the legal agreement
	AgreementKey string `json:"agreementKey"`
	// Contents of the legal agreement, suitable for embedding
	Content string `json:"content"`
	// Title of the legal agreement
	Title string `json:"title"`
	// URL to a page containing the legal agreement
	Url *string `json:"url,omitempty"`
}

// NewLegalAgreement instantiates a new LegalAgreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalAgreement(agreementKey string, content string, title string) *LegalAgreement {
	this := LegalAgreement{}
	this.AgreementKey = agreementKey
	this.Content = content
	this.Title = title
	return &this
}

// NewLegalAgreementWithDefaults instantiates a new LegalAgreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalAgreementWithDefaults() *LegalAgreement {
	this := LegalAgreement{}
	return &this
}

// GetAgreementKey returns the AgreementKey field value
func (o *LegalAgreement) GetAgreementKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgreementKey
}

// GetAgreementKeyOk returns a tuple with the AgreementKey field value
// and a boolean to check if the value has been set.
func (o *LegalAgreement) GetAgreementKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AgreementKey, true
}

// SetAgreementKey sets field value
func (o *LegalAgreement) SetAgreementKey(v string) {
	o.AgreementKey = v
}

// GetContent returns the Content field value
func (o *LegalAgreement) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *LegalAgreement) GetContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *LegalAgreement) SetContent(v string) {
	o.Content = v
}

// GetTitle returns the Title field value
func (o *LegalAgreement) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *LegalAgreement) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *LegalAgreement) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *LegalAgreement) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalAgreement) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *LegalAgreement) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *LegalAgreement) SetUrl(v string) {
	o.Url = &v
}

func (o LegalAgreement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["agreementKey"] = o.AgreementKey
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableLegalAgreement struct {
	value *LegalAgreement
	isSet bool
}

func (v NullableLegalAgreement) Get() *LegalAgreement {
	return v.value
}

func (v *NullableLegalAgreement) Set(val *LegalAgreement) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalAgreement(val *LegalAgreement) *NullableLegalAgreement {
	return &NullableLegalAgreement{value: val, isSet: true}
}

func (v NullableLegalAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


