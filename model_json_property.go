/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonProperty struct for JsonProperty
type JsonProperty struct {
	DefaultValue *string `json:"defaultValue,omitempty"`
	Format *string `json:"format,omitempty"`
	Items *map[string]interface{} `json:"items,omitempty"`
	MaxItems *int32 `json:"maxItems,omitempty"`
	Maximum *int32 `json:"maximum,omitempty"`
	MinItems *int32 `json:"minItems,omitempty"`
	Minimum *int32 `json:"minimum,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	Required bool `json:"required"`
	Type string `json:"type"`
}

// NewJsonProperty instantiates a new JsonProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonProperty(required bool, type_ string) *JsonProperty {
	this := JsonProperty{}
	this.Required = required
	this.Type = type_
	return &this
}

// NewJsonPropertyWithDefaults instantiates a new JsonProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPropertyWithDefaults() *JsonProperty {
	this := JsonProperty{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *JsonProperty) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *JsonProperty) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *JsonProperty) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *JsonProperty) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *JsonProperty) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *JsonProperty) SetFormat(v string) {
	o.Format = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *JsonProperty) GetItems() map[string]interface{} {
	if o == nil || o.Items == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetItemsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *JsonProperty) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given map[string]interface{} and assigns it to the Items field.
func (o *JsonProperty) SetItems(v map[string]interface{}) {
	o.Items = &v
}

// GetMaxItems returns the MaxItems field value if set, zero value otherwise.
func (o *JsonProperty) GetMaxItems() int32 {
	if o == nil || o.MaxItems == nil {
		var ret int32
		return ret
	}
	return *o.MaxItems
}

// GetMaxItemsOk returns a tuple with the MaxItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetMaxItemsOk() (*int32, bool) {
	if o == nil || o.MaxItems == nil {
		return nil, false
	}
	return o.MaxItems, true
}

// HasMaxItems returns a boolean if a field has been set.
func (o *JsonProperty) HasMaxItems() bool {
	if o != nil && o.MaxItems != nil {
		return true
	}

	return false
}

// SetMaxItems gets a reference to the given int32 and assigns it to the MaxItems field.
func (o *JsonProperty) SetMaxItems(v int32) {
	o.MaxItems = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *JsonProperty) GetMaximum() int32 {
	if o == nil || o.Maximum == nil {
		var ret int32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetMaximumOk() (*int32, bool) {
	if o == nil || o.Maximum == nil {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *JsonProperty) HasMaximum() bool {
	if o != nil && o.Maximum != nil {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given int32 and assigns it to the Maximum field.
func (o *JsonProperty) SetMaximum(v int32) {
	o.Maximum = &v
}

// GetMinItems returns the MinItems field value if set, zero value otherwise.
func (o *JsonProperty) GetMinItems() int32 {
	if o == nil || o.MinItems == nil {
		var ret int32
		return ret
	}
	return *o.MinItems
}

// GetMinItemsOk returns a tuple with the MinItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetMinItemsOk() (*int32, bool) {
	if o == nil || o.MinItems == nil {
		return nil, false
	}
	return o.MinItems, true
}

// HasMinItems returns a boolean if a field has been set.
func (o *JsonProperty) HasMinItems() bool {
	if o != nil && o.MinItems != nil {
		return true
	}

	return false
}

// SetMinItems gets a reference to the given int32 and assigns it to the MinItems field.
func (o *JsonProperty) SetMinItems(v int32) {
	o.MinItems = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *JsonProperty) GetMinimum() int32 {
	if o == nil || o.Minimum == nil {
		var ret int32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetMinimumOk() (*int32, bool) {
	if o == nil || o.Minimum == nil {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *JsonProperty) HasMinimum() bool {
	if o != nil && o.Minimum != nil {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given int32 and assigns it to the Minimum field.
func (o *JsonProperty) SetMinimum(v int32) {
	o.Minimum = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *JsonProperty) GetPattern() string {
	if o == nil || o.Pattern == nil {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetPatternOk() (*string, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *JsonProperty) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *JsonProperty) SetPattern(v string) {
	o.Pattern = &v
}

// GetRequired returns the Required field value
func (o *JsonProperty) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetRequiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *JsonProperty) SetRequired(v bool) {
	o.Required = v
}

// GetType returns the Type field value
func (o *JsonProperty) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JsonProperty) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JsonProperty) SetType(v string) {
	o.Type = v
}

func (o JsonProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.MaxItems != nil {
		toSerialize["maxItems"] = o.MaxItems
	}
	if o.Maximum != nil {
		toSerialize["maximum"] = o.Maximum
	}
	if o.MinItems != nil {
		toSerialize["minItems"] = o.MinItems
	}
	if o.Minimum != nil {
		toSerialize["minimum"] = o.Minimum
	}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if true {
		toSerialize["required"] = o.Required
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableJsonProperty struct {
	value *JsonProperty
	isSet bool
}

func (v NullableJsonProperty) Get() *JsonProperty {
	return v.value
}

func (v *NullableJsonProperty) Set(val *JsonProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonProperty(val *JsonProperty) *NullableJsonProperty {
	return &NullableJsonProperty{value: val, isSet: true}
}

func (v NullableJsonProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


