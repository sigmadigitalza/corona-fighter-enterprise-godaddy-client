/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VerificationsDomain struct for VerificationsDomain
type VerificationsDomain struct {
	DomainName *VerificationDomainName `json:"domainName,omitempty"`
	RealName *VerificationRealName `json:"realName,omitempty"`
}

// NewVerificationsDomain instantiates a new VerificationsDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationsDomain() *VerificationsDomain {
	this := VerificationsDomain{}
	return &this
}

// NewVerificationsDomainWithDefaults instantiates a new VerificationsDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationsDomainWithDefaults() *VerificationsDomain {
	this := VerificationsDomain{}
	return &this
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *VerificationsDomain) GetDomainName() VerificationDomainName {
	if o == nil || o.DomainName == nil {
		var ret VerificationDomainName
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationsDomain) GetDomainNameOk() (*VerificationDomainName, bool) {
	if o == nil || o.DomainName == nil {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *VerificationsDomain) HasDomainName() bool {
	if o != nil && o.DomainName != nil {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given VerificationDomainName and assigns it to the DomainName field.
func (o *VerificationsDomain) SetDomainName(v VerificationDomainName) {
	o.DomainName = &v
}

// GetRealName returns the RealName field value if set, zero value otherwise.
func (o *VerificationsDomain) GetRealName() VerificationRealName {
	if o == nil || o.RealName == nil {
		var ret VerificationRealName
		return ret
	}
	return *o.RealName
}

// GetRealNameOk returns a tuple with the RealName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationsDomain) GetRealNameOk() (*VerificationRealName, bool) {
	if o == nil || o.RealName == nil {
		return nil, false
	}
	return o.RealName, true
}

// HasRealName returns a boolean if a field has been set.
func (o *VerificationsDomain) HasRealName() bool {
	if o != nil && o.RealName != nil {
		return true
	}

	return false
}

// SetRealName gets a reference to the given VerificationRealName and assigns it to the RealName field.
func (o *VerificationsDomain) SetRealName(v VerificationRealName) {
	o.RealName = &v
}

func (o VerificationsDomain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainName != nil {
		toSerialize["domainName"] = o.DomainName
	}
	if o.RealName != nil {
		toSerialize["realName"] = o.RealName
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationsDomain struct {
	value *VerificationsDomain
	isSet bool
}

func (v NullableVerificationsDomain) Get() *VerificationsDomain {
	return v.value
}

func (v *NullableVerificationsDomain) Set(val *VerificationsDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationsDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationsDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationsDomain(val *VerificationsDomain) *NullableVerificationsDomain {
	return &NullableVerificationsDomain{value: val, isSet: true}
}

func (v NullableVerificationsDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationsDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


