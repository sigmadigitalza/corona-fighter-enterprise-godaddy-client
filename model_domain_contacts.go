/*
 * GoDaddy API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainContacts struct for DomainContacts
type DomainContacts struct {
	ContactAdmin *Contact `json:"contactAdmin,omitempty"`
	ContactBilling *Contact `json:"contactBilling,omitempty"`
	ContactRegistrant Contact `json:"contactRegistrant"`
	ContactTech *Contact `json:"contactTech,omitempty"`
}

// NewDomainContacts instantiates a new DomainContacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainContacts(contactRegistrant Contact) *DomainContacts {
	this := DomainContacts{}
	this.ContactRegistrant = contactRegistrant
	return &this
}

// NewDomainContactsWithDefaults instantiates a new DomainContacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainContactsWithDefaults() *DomainContacts {
	this := DomainContacts{}
	return &this
}

// GetContactAdmin returns the ContactAdmin field value if set, zero value otherwise.
func (o *DomainContacts) GetContactAdmin() Contact {
	if o == nil || o.ContactAdmin == nil {
		var ret Contact
		return ret
	}
	return *o.ContactAdmin
}

// GetContactAdminOk returns a tuple with the ContactAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainContacts) GetContactAdminOk() (*Contact, bool) {
	if o == nil || o.ContactAdmin == nil {
		return nil, false
	}
	return o.ContactAdmin, true
}

// HasContactAdmin returns a boolean if a field has been set.
func (o *DomainContacts) HasContactAdmin() bool {
	if o != nil && o.ContactAdmin != nil {
		return true
	}

	return false
}

// SetContactAdmin gets a reference to the given Contact and assigns it to the ContactAdmin field.
func (o *DomainContacts) SetContactAdmin(v Contact) {
	o.ContactAdmin = &v
}

// GetContactBilling returns the ContactBilling field value if set, zero value otherwise.
func (o *DomainContacts) GetContactBilling() Contact {
	if o == nil || o.ContactBilling == nil {
		var ret Contact
		return ret
	}
	return *o.ContactBilling
}

// GetContactBillingOk returns a tuple with the ContactBilling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainContacts) GetContactBillingOk() (*Contact, bool) {
	if o == nil || o.ContactBilling == nil {
		return nil, false
	}
	return o.ContactBilling, true
}

// HasContactBilling returns a boolean if a field has been set.
func (o *DomainContacts) HasContactBilling() bool {
	if o != nil && o.ContactBilling != nil {
		return true
	}

	return false
}

// SetContactBilling gets a reference to the given Contact and assigns it to the ContactBilling field.
func (o *DomainContacts) SetContactBilling(v Contact) {
	o.ContactBilling = &v
}

// GetContactRegistrant returns the ContactRegistrant field value
func (o *DomainContacts) GetContactRegistrant() Contact {
	if o == nil {
		var ret Contact
		return ret
	}

	return o.ContactRegistrant
}

// GetContactRegistrantOk returns a tuple with the ContactRegistrant field value
// and a boolean to check if the value has been set.
func (o *DomainContacts) GetContactRegistrantOk() (*Contact, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContactRegistrant, true
}

// SetContactRegistrant sets field value
func (o *DomainContacts) SetContactRegistrant(v Contact) {
	o.ContactRegistrant = v
}

// GetContactTech returns the ContactTech field value if set, zero value otherwise.
func (o *DomainContacts) GetContactTech() Contact {
	if o == nil || o.ContactTech == nil {
		var ret Contact
		return ret
	}
	return *o.ContactTech
}

// GetContactTechOk returns a tuple with the ContactTech field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainContacts) GetContactTechOk() (*Contact, bool) {
	if o == nil || o.ContactTech == nil {
		return nil, false
	}
	return o.ContactTech, true
}

// HasContactTech returns a boolean if a field has been set.
func (o *DomainContacts) HasContactTech() bool {
	if o != nil && o.ContactTech != nil {
		return true
	}

	return false
}

// SetContactTech gets a reference to the given Contact and assigns it to the ContactTech field.
func (o *DomainContacts) SetContactTech(v Contact) {
	o.ContactTech = &v
}

func (o DomainContacts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContactAdmin != nil {
		toSerialize["contactAdmin"] = o.ContactAdmin
	}
	if o.ContactBilling != nil {
		toSerialize["contactBilling"] = o.ContactBilling
	}
	if true {
		toSerialize["contactRegistrant"] = o.ContactRegistrant
	}
	if o.ContactTech != nil {
		toSerialize["contactTech"] = o.ContactTech
	}
	return json.Marshal(toSerialize)
}

type NullableDomainContacts struct {
	value *DomainContacts
	isSet bool
}

func (v NullableDomainContacts) Get() *DomainContacts {
	return v.value
}

func (v *NullableDomainContacts) Set(val *DomainContacts) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainContacts) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainContacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainContacts(val *DomainContacts) *NullableDomainContacts {
	return &NullableDomainContacts{value: val, isSet: true}
}

func (v NullableDomainContacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainContacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


